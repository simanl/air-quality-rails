---
# Our PostgreSQL service:
postgres:
  image: postgres:9.4.4 # Heroku PostgreSQL Version. This of course is going to be updated constantly!
  ports:
    - "5442:5432" # Bind host port 5432 to PostgreSQL port 5432
  volumes:
    - .:/app # We're mounting this folder so we can backup/restore database dumps from our app folder.
    - ./docker-development/postgres-setup:/docker-entrypoint-initdb.d
  environment:
    LC_ALL: C.UTF-8
    POSTGRES_PASSWORD: 41rqu4l1ty

# Our Redis service:
redis:
  image: redis:2.8
  ports:
    - "6389:6379" # Bind host port 6379 to Redis port 6379

# Application: -----------------------------------------------------------------
# We'll also use this configuration (&app_base) for the worker and test
# containers:
web: &app_base
  image: vovimayhem/app-dev:mri-2.2 # A ruby image with DTrace enabled for dev
  # Rails 4.2 now binds to 127.0.0.1 by default and not 0.0.0.0.
  # Start the server using bin/rails server -b 0.0.0.0 and that should sort it.
  # http://stackoverflow.com/questions/27799260/rails-4-2-server-port-forwarding-on-vagrant-does-not-work
  # It's fine for development, do not do it in production:
  command: rails server -p 3000 -b 0.0.0.0
  ports:
    - "3001:3000" # Bind host port 3000 to app HTTP port 3000
  volumes:
    - .:/app
  ##############################################################################
  # With linked containers, Docker writes entries to the container's /etc/hosts.
  # We'll try here naming the entries docker will insert into the
  # container's /etc/hosts, so we can use more familiar URL's for our app - See
  # this container's environment section below:
  links: &app_links
    - postgres:postgres.air-quality.local
    - redis:redis.air-quality.local
  environment: &app_environment
    # PostgreSQL Database:
    DATABASE_URL: postgres://postgres:41rqu4l1ty@postgres.air-quality.local:5432/air_quality_development?pool=25&encoding=unicode

    # Redis Database:
    REDIS_URL: redis://redis.air-quality.local:6379

    # Sidekiq configuration:
    SIDEKIQ_CONCURRENCY: 5
    SIDEKIQ_TIMEOUT: 10

    # Enable the byebug debugging server - this can be overriden
    # from the command line:
    ENABLE_DEBUG_SERVER: true

    # Run the app in the 'development' environment:
    RACK_ENV: development
    RAILS_ENV: development
  env_file: .env # Include the environment variables in the unversioned .env file

# worker:
#   <<: *app_base
#   ports: []
#   command: sidekiq -c 25 -q default

# App Guard: Keeps running tests on a separate process:
test:
  <<: *app_base # We copy from &app_base, and override:
  ports: []
  command: guard start --no-bundler-warning --no-interactions
  links:
    - postgres:postgres.air-quality.local
  environment:
    <<: *app_environment
    # PostgreSQL Database:
    DATABASE_URL: postgres://postgres:41rqu4l1ty@postgres.air-quality.local:5432/air_quality_test?pool=25&encoding=unicode

    # Run the app in the 'test' environment, instead of the default 'developent'
    RACK_ENV: test
    RAILS_ENV: test
