#! /bin/bash

set -e

: ${APP_PATH:="/app"}
: ${APP_TEMP_PATH:="$APP_PATH/tmp"}
: ${APP_SETUP_LOCK:="$APP_TEMP_PATH/setup.lock"}
: ${APP_SETUP_WAIT:="5"}

# 1: Define the functions lock and unlock our app containers setup processes:
function lock_setup { mkdir -p $APP_TEMP_PATH && touch $APP_SETUP_LOCK; }
function unlock_setup { rm -rf $APP_SETUP_LOCK; }
function wait_setup { echo "Waiting for app setup to finish..."; sleep $APP_SETUP_WAIT; }

# 2: 'Unlock' the setup process if the script exits prematurely:
trap unlock_setup HUP INT QUIT KILL TERM

# 3: Wait until the setup 'lock' file no longer exists:
while [ -f $APP_SETUP_LOCK ]; do wait_setup; done

# 4: 'Lock' the setup process, to prevent a race condition when the project's
# app containers will try to install gems and setup the database concurrently:
lock_setup

# 5: Check if data tables exist, or download the initial data tables:
if [ ! -f ${APP_PATH}/tablas/series/tabla_maestra_imputada.RData ]; then
  printf "Downloading initial tables..."
  descargar-tablas-iniciales
  echo " finished!"
fi

# 6: 'Unlock' the setup process:
unlock_setup

# 7: Especificar el comando default si no existe:
if [ -z "$1" ]; then set -- Rscript start.R "$@"; fi

# 8: Si el comando es el de arranque del servidor de RServe:
if [ "$1" = 'Rscript' ]; then
  # Asegurarse de que existen los directorios de las tablas
	mkdir -p /app/tablas
  # Asegurarse que el directorio de la app solo puede ser accesado por el owner
	chmod 700 /app/tablas
  # Asegurarse que el directorio de la app le pertenece al usuario y grupo de 'pronosticos'
	chown -R pronosticos:pronosticos /app/tablas
  # Ejecutar el comando como el usuario 'pronosticos'
	exec gosu pronosticos "$@"
fi

# 9: Execute the given or default command:
exec "$@"
